import { Subject, Observable } from 'rxjs';
import { ApplicationDto } from 'src/dto/application-dto';
import { ModuleDto } from 'src/dto/module-dto';
import { UserForm } from 'src/dto/user-form';
import { Application } from 'src/entity/application';
import { CategoryUser } from 'src/entity/category';
import { Module } from 'src/entity/module';
import { Role } from 'src/entity/role';
import { ModulePrivileges } from 'src/entity/role-module';
import { User } from 'src/entity/user';
import { UserManagement } from 'src/service/user/user-manager';
export declare class UserManagementController {
    private readonly userMan;
    constructor(userMan: UserManagement);
    getUsers(): Observable<User[]>;
    getCategories(): Observable<CategoryUser[]>;
    addUser(data: UserForm): Subject<User>;
    addApp(data: ApplicationDto): Subject<Application>;
    editApp(id: string, data: ApplicationDto, user: string): Subject<Application>;
    getApp(id: string): Subject<Application>;
    searchApp(pattern: string): Observable<Application[]>;
    getApps(): Observable<Application[]>;
    getUser(id: string): Subject<User>;
    findByUsername(username: string): Subject<User>;
    findByUsernameAndApp(username: string, app: string): Subject<User>;
    findByUsernameOrPhoneOrEmailAndApp(username: string, app: string, email: string, phone: string): Subject<User>;
    getUsersByApp(app: string): Observable<User[]>;
    getModules(): Observable<Module[]>;
    addModule(modules: ModuleDto): Observable<Module>;
    addModuleToRole(module: ModulePrivileges, role: Role): Observable<Role>;
    addModulesToRole(modules: Module[], role: Role): Observable<Role>;
    editModule(id: string, data: Module, user: User): Subject<Module>;
    addRole(role: Role): Subject<Role>;
    addRoles(roles: Role[]): Observable<Role>;
    addRolesToUser(roles: Role[], user: User, doneBy: User): Subject<User>;
    removeRolesFromUser(roles: Role[], user: User, doneBy: User): Subject<User>;
    enableUser(user: User, doneBy: User): Subject<boolean>;
    disableUser(user: User, doneBy: User): Subject<boolean>;
    addCategory(data: CategoryUser): Observable<CategoryUser>;
}
