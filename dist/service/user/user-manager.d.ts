import { Application } from "src/entity/application";
import { Observable, Subject } from "rxjs";
import { ApplicationDto } from "src/dto/application-dto";
import { UserForm } from "src/dto/user-form";
import { User } from "src/entity/user";
import { Module } from "src/entity/module";
import { Role } from "src/entity/role";
import { CategoryUser } from "src/entity/category";
import { AccountActivation } from "src/entity/account-activation";
import { ModuleDto } from "src/dto/module-dto";
import { ModulesPrivilegesDto, RoleDto, RoleSimpleDto } from "src/dto/role-module-dto";
export interface UserManagement {
    addUser(data: UserForm): Subject<User>;
    addApp(data: ApplicationDto): Subject<Application>;
    editApp(id: string, data: ApplicationDto, user: string): Subject<Application>;
    getApp(id: string): Subject<Application>;
    searchApp(pattern: string): Observable<Application[]>;
    getApps(): Observable<Application[]>;
    getUser(id: string): Subject<User>;
    appHasRole(app: string, role: string): Subject<boolean>;
    appHasModule(app: string, module: string): Subject<boolean>;
    getUsers(): Observable<User[]>;
    getUsersByApp(app: string): Observable<User[]>;
    findByUsername(username: string): Subject<User>;
    findByUsernameOrPhoneOrEmailAndApp(username: string, phone: string, email: string, app: string): Subject<User>;
    findByUsernameAndApp(username: string, app: string): Subject<User>;
    findAppByCode(code: string): Subject<Application>;
    findAppByEmailOrPhone(email: string, phone: string): Subject<Application>;
    getModules(): Observable<Module[]>;
    addModule(module: ModuleDto): Subject<void>;
    addModules(modules: ModuleDto[]): Subject<void>;
    addModuleToApp(modules: ModuleDto, app: string): Subject<void>;
    addModulesToApp(modules: Module[], app: string): Observable<Module[]>;
    addModuleToRole(module: ModulesPrivilegesDto, role: string, app: string): Observable<Role>;
    addModulesToRole(modules: ModulesPrivilegesDto[], role: string, app: string): Observable<Role>;
    editModule(id: string, data: Module, user: User, app: string): Subject<Module>;
    addRole(role: RoleSimpleDto): Subject<void>;
    addRoleToApp(role: RoleDto, app: string): Subject<void>;
    addRoles(roles: RoleSimpleDto[]): Observable<void>;
    changeModulePrivilegeOfApp(role: string, data: ModulesPrivilegesDto, app: string): Subject<void>;
    getRoles(): Observable<Role[]>;
    getCategories(): Observable<CategoryUser[]>;
    addCategory(c: CategoryUser): Observable<CategoryUser>;
    addRolesToUser(roles: Role[], user: User, doneBy: User): Subject<User>;
    removeRolesFromUser(roles: Role[], user: User, doneBy: User): Subject<User>;
    enableUser(user: User, doneBy: User): Subject<boolean>;
    disableUser(user: User, doneBy: User): Subject<boolean>;
    activation(code: string): Subject<User>;
    requestActivation(username: string, app: string): Subject<AccountActivation>;
    changePassword(idaccount: any, hashPwd: any): Subject<User>;
    findModuleOfApp(app: string, id: string): Subject<Module>;
    findRoleOfApp(app: string, id: string): Subject<Role>;
    findModuleOfRole(module: string): Subject<Module>;
}
