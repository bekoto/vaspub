import { Application, ApplicationDocument } from 'src/entity/application';
import { Subject, Observable } from 'rxjs';
import { ApplicationDto } from 'src/dto/application-dto';
import { UserForm } from 'src/dto/user-form';
import { Module, ModuleDocument } from 'src/entity/module';
import { Role, RoleDocument } from 'src/entity/role';
import { User, UserDocument } from 'src/entity/user';
import { UserManagement } from './user-manager';
import { CategoryUser, CategoryUserDocument } from 'src/entity/category';
import { AccountActivation, AccountActivationDocument } from 'src/entity/account-activation';
import { FileDocument } from 'src/entity/file';
import mongoose, { Model } from 'mongoose';
import { MailerService } from '@nestjs-modules/mailer';
import { ModulePrivileges } from 'src/entity/role-module';
export declare class UserService implements UserManagement {
    private readonly userrModel;
    private readonly roleModel;
    private readonly appModel;
    private readonly moduleModel;
    private readonly categoryModel;
    private readonly acModel;
    private readonly FileModel;
    private mailerService;
    private readonly connection;
    rgx: (pattern: any) => RegExp;
    constructor(userrModel: Model<UserDocument>, roleModel: Model<RoleDocument>, appModel: Model<ApplicationDocument>, moduleModel: Model<ModuleDocument>, categoryModel: Model<CategoryUserDocument>, acModel: Model<AccountActivationDocument>, FileModel: Model<FileDocument>, mailerService: MailerService, connection: mongoose.Connection);
    addModuleToRole(module: ModulePrivileges, role: Role): Observable<Role>;
    appHasRole(app: string, role: string): Subject<boolean>;
    appHasModule(app: string, module: string): Subject<boolean>;
    addModules(modules: Module[], app: string): Observable<Module[]>;
    changePassword(idaccount: User, hashPwd: string): Subject<User>;
    getUsersByApp(app: string): Observable<User[]>;
    activation(code: string): Subject<User>;
    requestActivation(username: string, app: string): Subject<AccountActivation>;
    getCategories(): Observable<CategoryUser[]>;
    addCategory(c: CategoryUser): Observable<CategoryUser>;
    getUsers(): Observable<User[]>;
    getRoles(): Observable<Role[]>;
    findAppByCode(code: string): Subject<Application>;
    findAppByEmailOrPhone(email: string, phone: string): Subject<Application>;
    findByUsernameOrPhoneOrEmailAndApp(username: string, phone: string, email: string, app: string): Subject<User>;
    addUser(data: UserForm): Subject<User>;
    addApp(data: ApplicationDto): Subject<Application>;
    editApp(id: string, data: ApplicationDto, user: string): Subject<Application>;
    getApp(id: string): Subject<Application>;
    searchApp(pattern: string): Observable<Application[]>;
    getApps(): Observable<Application[]>;
    getUser(id: string): Subject<User>;
    findByUsername(username: string): Subject<User>;
    findByUsernameAndApp(username: string, app: any): Subject<User>;
    getModules(): Observable<Module[]>;
    addModule(modules: Module): Subject<Module>;
    addModulesToRole(modules: ModulePrivileges[], role: Role): Observable<Role>;
    editModule(id: string, data: Module, user: User): Subject<Module>;
    addRole(role: Role): Subject<Role>;
    addRoles(roles: Role[]): Observable<Role[]>;
    addRolesToUser(roles: Role[], user: User, doneBy: User): Subject<User>;
    removeRolesFromUser(roles: Role[], user: User, doneBy: User): Subject<User>;
    enableUser(user: User, doneBy: User): Subject<boolean>;
    disableUser(user: User, doneBy: User): Subject<boolean>;
}
